// <auto-generated />
using System;
using EntityTP.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityTP.Migrations
{
    [DbContext(typeof(CommerceDbContext))]
    partial class CommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdresseSociete", b =>
                {
                    b.Property<long>("AdressesAdresseId")
                        .HasColumnType("bigint");

                    b.Property<long>("EtablissementsSocieteId")
                        .HasColumnType("bigint");

                    b.HasKey("AdressesAdresseId", "EtablissementsSocieteId");

                    b.HasIndex("EtablissementsSocieteId");

                    b.ToTable("AdresseSociete");
                });

            modelBuilder.Entity("EntityTP.DAL.Adresse", b =>
                {
                    b.Property<long>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdresseId"));

                    b.Property<string>("CodePostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuDit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeVoie")
                        .HasColumnType("int");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdresseId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("EntityTP.DAL.Personne", b =>
                {
                    b.Property<long>("PersonneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PersonneId"));

                    b.Property<long?>("AdressePrincipaleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AdresseSecondaireId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateNaissance")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SocieteId")
                        .HasColumnType("bigint");

                    b.HasKey("PersonneId");

                    b.HasIndex("AdressePrincipaleId");

                    b.HasIndex("AdresseSecondaireId");

                    b.HasIndex("SocieteId");

                    b.ToTable("Personnes", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EntityTP.DAL.Societe", b =>
                {
                    b.Property<long>("SocieteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SocieteId"));

                    b.Property<long>("AdresseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocieteId");

                    b.HasIndex("AdresseId");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("EntityTP.DAL.PersonneSyndiquee", b =>
                {
                    b.HasBaseType("EntityTP.DAL.Personne");

                    b.Property<DateTime>("DateSyndication")
                        .HasColumnType("datetime2");

                    b.Property<string>("Syndicat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PersonneSyndiquees", (string)null);
                });

            modelBuilder.Entity("AdresseSociete", b =>
                {
                    b.HasOne("EntityTP.DAL.Adresse", null)
                        .WithMany()
                        .HasForeignKey("AdressesAdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityTP.DAL.Societe", null)
                        .WithMany()
                        .HasForeignKey("EtablissementsSocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityTP.DAL.Personne", b =>
                {
                    b.HasOne("EntityTP.DAL.Adresse", "AdressePrincipale")
                        .WithMany("Personnes")
                        .HasForeignKey("AdressePrincipaleId");

                    b.HasOne("EntityTP.DAL.Adresse", "AdresseSecondaire")
                        .WithMany("PersonnesSecondaire")
                        .HasForeignKey("AdresseSecondaireId");

                    b.HasOne("EntityTP.DAL.Societe", "Societe")
                        .WithMany("Personnes")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdressePrincipale");

                    b.Navigation("AdresseSecondaire");

                    b.Navigation("Societe");
                });

            modelBuilder.Entity("EntityTP.DAL.Societe", b =>
                {
                    b.HasOne("EntityTP.DAL.Adresse", "SiegeSocial")
                        .WithMany("Societes")
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiegeSocial");
                });

            modelBuilder.Entity("EntityTP.DAL.PersonneSyndiquee", b =>
                {
                    b.HasOne("EntityTP.DAL.Personne", null)
                        .WithOne()
                        .HasForeignKey("EntityTP.DAL.PersonneSyndiquee", "PersonneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityTP.DAL.Adresse", b =>
                {
                    b.Navigation("Personnes");

                    b.Navigation("PersonnesSecondaire");

                    b.Navigation("Societes");
                });

            modelBuilder.Entity("EntityTP.DAL.Societe", b =>
                {
                    b.Navigation("Personnes");
                });
#pragma warning restore 612, 618
        }
    }
}
